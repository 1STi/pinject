
Verifying injectability
=======================

Choices:
1. Allow binding specs to require but not actually declare bindings.
2. Require declaring everything to be instantiated when calling new_object_graph().

Benefits of ``require()``
-------------------------

You distribute the requirements to the binding specs that need them.  For
example, if program A depends on library B, which depends on library C, which
depends on library D, and library D takes an object graph and instantiates
something, then you don't need to modify program A when instantiating
something new in library D.  (Though, this may be a spurious reason, since why
would program A be passing an object graph through several layers of library?)

You don't have to declare up front everything that you may inject.  Doing so
may be difficult to do in a large program modified by many people.

You find out about missing dependencies for everything instantiable when the
object graph is created, as opposed to finding out about missing "I'm going to
instantiate this" declarations only when you actually try to instantiate
something (and fail).

Benefits of declaring instantiables
-----------------------------------

You don't have to satisfy requirements, declared by binding specs, for things
you're not actually going to instantiate.  (Though, this may be a spurious
reason, since binding specs are really supposed to declare bindings that you'd
use all together, and you could always break up a binding spec with unwanted
requirements.)

Decision
--------

Use ``require()``.

Field injection
===============

Choices:
1. Support field injection.
2. Require initializer injection.

Benefits of field injection
---------------------------

You don't need initializer boilerplate.  With initializer injection, you write
the name of each arg three times. ... Maybe I should add a
@copy_args_to_members decorator?

Benefits of requiring initializer injection
-------------------------------------------

With initializers, you have docstrings, a standard place and format for
documentation, whereas there is no such standard for fields.

An initializer makes it clear when your object is fully initialized and (if
you design your objects properly) forces full initialization up front.  With
field injection, there's no single place to look for all fields that need
injecting, and no way for an object to guarantee that all fields have values
appropriately set.

Field injection makes manual instantiation more cumbersome.  Instead of
writing ``SomeObject(foo, bar, baz)`` on a single line, you have to write ``s
= SomeObject(); s.foo = foo; s.bar = bar; s.baz = baz`` on four lines.  You
also can't instantiate the object as a single expression, unless you write a
helper function, in which case you may as well make the helper function be the
initializer, and use initializer injection.

Field injection makes debugging with manual injection more difficult.  For
example, because instead of a missing initializer arg being discovered right
where the object is instantiated, the missing field value is discovered only
when it's used and found to be unset.

Decision
--------

Don't support field injection.  Require initializer injection.
