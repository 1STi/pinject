TODO:
- add @copy_args_to_members with are_attrs arg
- describe features specifically omitted, e.g.,
  - circular injection
  - scope annotations on classes
- figure out whether/how Pinject works with inheritance

Maybe TODO:
- standard tests for scopes (reentrant? thread-safe?), annotations (eq?
     hash?), etc.
- change default scope back to prototype?
- eager singletons
- find modules on PYTHONPATH instead of having to import them
- automatically instantiate the concrete subclass of an interface?
    (use abc module)
- visual graph of created objects

Questions:
- How should I deal with someone wanting to instantiate a class in a scope,
    without using an arg name in between?  Scopes apply to binding keys,
    which are arg names, not classes.  Is it going to be harmful if you
    can't instantiate a class directly in a scope?  I don't think so, but
    I'm not sure.  It makes some things awkward, like a special scope from
    which it's OK to inject objects from any scope.  Maybe the main
    ObjectGraph method should be wrap() instead of provide_class()??
- Remove ObjectGraph.wrap()?
- Why should @inject apply to __init__() rather than the class?
